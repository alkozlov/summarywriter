import argparse
from typing import Annotated, Sequence, TypedDict
from dotenv import load_dotenv
from langchain_core.messages import (
    BaseMessage,
    SystemMessage,
    HumanMessage,
    AIMessage,
)
from langchain_openai import ChatOpenAI, OpenAI
from langchain_core.tools import tool
from langgraph.graph.message import add_messages
from langgraph.graph import StateGraph, END, START
from langgraph.prebuilt import create_react_agent
from langchain_mcp_adapters.client import MultiServerMCPClient
import os
import asyncio
import openai

rules_path = "rules/rules.md"
style_path = "rules/style.md"

load_dotenv()
custom_tools = []

async def get_all_tools():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤: –≤–∞—à–∏—Ö + MCP"""
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ MCP –∫–ª–∏–µ–Ω—Ç–∞
    mcp_client = MultiServerMCPClient(
        {
            "filesystem": {
                "transport": "stdio",
                "command": "npx",
                "args": ["-y", "@modelcontextprotocol/server-filesystem", "."],
            },
            "context7": {
                "transport": "stdio",
                "command": "npx",
                "args": ["-y", "@upstash/context7-mcp"],
            },
            "ebook-mcp": {
                "transport": "stdio",
                "command": "uv",
                "args": [
                    "--directory",
                    "C:\\Users\\AKazlou\\mcp\\ebook-mcp\\src\\ebook_mcp\\",
                    "run",
                    "main.py"
                ]
            },
        }
    )

    # –ü–æ–ª—É—á–∞–µ–º MCP –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã
    mcp_tools = await mcp_client.get_tools()

    # –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤–∞—à–∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã —Å MCP –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞–º–∏
    return custom_tools + mcp_tools

async def run_query(agent, query: str):
    """–í—ã–ø–æ–ª–Ω—è–µ—Ç –æ–¥–∏–Ω –∑–∞–ø—Ä–æ—Å –∫ –∞–≥–µ–Ω—Ç—É —Å —á–∏—Ç–∞–µ–º—ã–º –≤—ã–≤–æ–¥–æ–º"""
    print(f"üéØ –ó–∞–ø—Ä–æ—Å: {query}")
    
    step_counter = 0
    processed_messages = set()  # –î–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è
    
    try:
        async for event in agent.astream(
            {"messages": [{"role": "user", "content": query}]},
            config={"recursion_limit": 50},
            stream_mode="values",
        ):
            if "messages" in event and event["messages"]:
                messages = event["messages"]
                
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –Ω–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
                for msg in messages:
                    msg_id = getattr(msg, 'id', str(id(msg)))
                    if msg_id in processed_messages:
                        continue
                    processed_messages.add(msg_id)
                    
                    # –ü–æ–ª—É—á–∞–µ–º —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è
                    msg_type = getattr(msg, 'type', 'unknown')
                    content = getattr(msg, 'content', '')
                    
                    # 1. –°–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    if msg_type == 'human':
                        print(f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {content}")
                        print("-" * 40)
                    
                    # 2. –°–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ò–ò
                    elif msg_type == 'ai':
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –≤—ã–∑–æ–≤–æ–≤ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
                        tool_calls = getattr(msg, 'tool_calls', [])
                        
                        if tool_calls:
                            step_counter += 1
                            print(f"ü§ñ –®–∞–≥ {step_counter}: –ê–≥–µ–Ω—Ç –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã")
                            
                            # –†–∞–∑–º—ã—à–ª–µ–Ω–∏—è –∞–≥–µ–Ω—Ç–∞ (–µ—Å–ª–∏ –µ—Å—Ç—å)
                            if content and content.strip():
                                print(f"üí≠ –†–∞–∑–º—ã—à–ª–µ–Ω–∏—è: {content}")
                            
                            # –î–µ—Ç–∞–ª–∏ –∫–∞–∂–¥–æ–≥–æ –≤—ã–∑–æ–≤–∞ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞
                            for i, tool_call in enumerate(tool_calls, 1):
                                # –ü–∞—Ä—Å–∏–º tool_call –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ñ–æ—Ä–º–∞—Ç–∞
                                if isinstance(tool_call, dict):
                                    tool_name = tool_call.get('name', 'unknown')
                                    tool_args = tool_call.get('args', {})
                                    tool_id = tool_call.get('id', 'unknown')
                                else:
                                    # –ï—Å–ª–∏ —ç—Ç–æ –æ–±—ä–µ–∫—Ç —Å –∞—Ç—Ä–∏–±—É—Ç–∞–º–∏
                                    tool_name = getattr(tool_call, 'name', 'unknown')
                                    tool_args = getattr(tool_call, 'args', {})
                                    tool_id = getattr(tool_call, 'id', 'unknown')
                                
                                print(f"üîß –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç {i}: {tool_name}")
                                print(f"   üì• –ü–∞—Ä–∞–º–µ—Ç—Ä—ã: {tool_args}")
                                print(f"   üÜî ID: {tool_id}")
                            print("-" * 40)
                        
                        # –§–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç (–±–µ–∑ tool_calls)
                        elif content and content.strip():
                            print(f"üéâ –§–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç:")
                            print(f"üí¨ {content}")
                            print("-" * 40)
                    
                    # 3. –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
                    elif msg_type == 'tool':
                        tool_name = getattr(msg, 'name', 'unknown')
                        tool_call_id = getattr(msg, 'tool_call_id', 'unknown')
                        print(f"üì§ –†–µ–∑—É–ª—å—Ç–∞—Ç –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞: {tool_name}")
                        print(f"   üÜî Call ID: {tool_call_id}")
                        
                        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                        if content:
                            # –ü—ã—Ç–∞–µ–º—Å—è —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å JSON –¥–ª—è –∫—Ä–∞—Å–∏–≤–æ–≥–æ –≤—ã–≤–æ–¥–∞
                            try:
                                import json
                                if content.strip().startswith(('{', '[')):
                                    parsed = json.loads(content)
                                    formatted = json.dumps(parsed, indent=2, ensure_ascii=False)
                                    print(f"   üìä –†–µ–∑—É–ª—å—Ç–∞—Ç:")
                                    for line in formatted.split('\n'):
                                        print(f"     {line}")
                                else:
                                    print(f"   üìä –†–µ–∑—É–ª—å—Ç–∞—Ç: {content}")
                            except:
                                print(f"   üìä –†–µ–∑—É–ª—å—Ç–∞—Ç: {content}")
                        print("-" * 40)
                    
                    # 4. –î—Ä—É–≥–∏–µ —Ç–∏–ø—ã —Å–æ–æ–±—â–µ–Ω–∏–π (–¥–ª—è –æ—Ç–ª–∞–¥–∫–∏)
                    else:
                        if content:
                            print(f"‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø ({msg_type}): {content[:100]}...")
                            print("-" * 40)
    
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞: {e}")
        print(f"üìä –í—ã–ø–æ–ª–Ω–µ–Ω–æ —à–∞–≥–æ–≤: {step_counter}")
        raise
    
    print("=" * 80)
    print("‚úÖ –ó–∞–ø—Ä–æ—Å –æ–±—Ä–∞–±–æ—Ç–∞–Ω")
    print()

async def main():
    all_tools = await get_all_tools()

    parser = argparse.ArgumentParser(description="Summarize PDF chapter to Obsidian.")
    # parser.add_argument("--file", required=True, help="Path to the PDF file.")
    # parser.add_argument("--pages", required=True, help="Page range to process (e.g., 43-58).")
    # parser.add_argument("--out", required=True, help="Output directory for Obsidian.")
    parser.add_argument("--query", required=True, help="Output directory for Obsidian.")

    args = parser.parse_args()
    # start_page, end_page = map(int, args.pages.split('-'))
    userQuery = args.query

    print(f"[1] Reading summarization rules from {rules_path}...")
    with open(rules_path, "r", encoding="utf-8") as f:
        rules_text = f.read()
    
    print(f"[2] Reading summarization rules from {style_path}...")
    with open(style_path, "r", encoding="utf-8") as f:
        style_text = f.read()

    prompt = f"""
        You are a professional technical specialist and technical writer helping a developer study new technologies and write summaries in Markdown format.
        
        IMPORTANT INSTRUCTIONS:
        1. When asked to summarize PDF content, use the ebook-mcp tools to read the PDF pages
        2. Extract text from the specified page range
        3. Create a well-structured summary following the rules below
        4. Write the summary to a file in the output directory
        5. Provide a final response confirming completion
        
        Follow these summarization rules strictly:
        <rules>
        {rules_text}
        </rules>

        Summarize the content in a clear, structured Markdown format.
        Use the following style guidelines:
        <style_guidelines>
        {style_text}
        </style_guidelines>
        
        Always provide a clear, final response when your task is complete.
        """

    # OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
    # client = openai.OpenAI(api_key=OPENAI_API_KEY)

    gpt4_model = ChatOpenAI(
        model="gpt-4o-mini",
        temperature=0.4,
        api_key=os.getenv("OPENAI_API_KEY")
    )

    # gpt4_model=OpenAI(
    #         model="gpt-4o-mini",
    #         temperature=0.4,
    #         api_key=os.getenv("OPENAI_API_KEY")
    # )

    # –°–æ–∑–¥–∞–µ–º –∞–≥–µ–Ω—Ç–∞ —Å –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞–º–∏ –∏ –ø—Ä–æ–º–ø—Ç–æ–º
    print("[3] Creating agent with tools and prompt...")

    agent = create_react_agent(
        model=gpt4_model,
        tools=all_tools,
        prompt=prompt
    )

    print("[4] Summarizing content via LLM...")
    # await run_query(agent, f"Summarize the content of the PDF file {args.file} from pages {start_page} to {end_page}.")
    await run_query(agent, userQuery)

if __name__ == "__main__":
    asyncio.run(main())